# Landofcoder
#
# NOTICE OF LICENSE
#
# This source file is subject to the Landofcoder.com license that is
# available through the world-wide-web at this URL:
# https://landofcoder.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Landofcoder
# @package     Lof_SellerMessageGraphQl
# @copyright   Copyright (c) 2022 Landofcoder (https://landofcoder.com/)
# @license     https://landofcoder.com/LICENSE.txt

type Query {

    customerMessages (
        filter: SellerMessageFilterInput @doc(description: "Identifies which seller messages filter inputs to search for and return.")
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
        sort: SellerMessageSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending seller message.")
    ): SellerMessages @resolver( class: "Lof\\SellerMessageGraphQl\\Model\\Resolver\\SellerMessage") @doc(description: "Query by Query Customer Messages.")

    sellerMessages (
        filter: SellerMessageFilterInput @doc(description: "Identifies which seller messages filter inputs to search for and return.")
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
        sort: SellerMessageSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending seller message.")
    ) : SellerMessages @resolver(class: "\\Lof\\SellerMessageGraphQl\\Model\\Resolver\\Seller\\Messages") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes")
}

type Mutation {

    customerSendMessage(input: CustomerMessageInput!): MarketplaceOuput @resolver(class:"\\Lof\\SellerMessageGraphQl\\Model\\Resolver\\Customer\\SendMessage") @doc(description: "Customer send message to seller")

    customerReplyMessage(input: ReplyMessageInput!): MarketplaceOuput @resolver(class:"\\Lof\\SellerMessageGraphQl\\Model\\Resolver\\Customer\\ReplyMessage") @doc(description: "Customer reply Messaage")

    sellerReplyMessage(input: SellerReplyMessageInput!): MarketplaceOuput @resolver(class:"\\Lof\\SellerMessageGraphQl\\Model\\Resolver\\Seller\\ReplyMessage") @doc(description: "Seller reply Messaage")

    sellerSendAdminMessage(input: AdminMessageInput!): MarketplaceOuput @resolver(class:"\\Lof\\SellerMessageGraphQl\\Model\\Resolver\\Seller\\SendAdminMessage") @doc(description: "Seller send admin message to admin")

    sellerReplyAdminMessage(input: ReplyMessageInput!): MarketplaceOuput @resolver(class:"\\Lof\\SellerMessageGraphQl\\Model\\Resolver\\Seller\\ReplyAdminMessage") @doc(description: "Seller reply Admin Messaage")
}

type SellerMessages {
  total_count: Int @doc(description: "The number of seller messages returned")
  items: [SellerMessage] @doc(description: "An array of items that match the specified search criteria")
  page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
}

type SellerMessageDetails {
  total_count: Int @doc(description: "The number of seller messages details returned")
  items: [SellerMessageDetail] @doc(description: "An array of items that match the specified search criteria")
  page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
}

type SellerMessage {
    message_id: Int @doc(description: "The number of seller message returned")
    description: String @doc(description: "message description field")
    subject: String @doc(description: "message subject field")
    sender_email: String @doc(description: "sender_email field")
    sender_name: String @doc(description: "sender_name field")
    created_at: String @doc(description: "created_at field")
    status: Int @doc(description: "status field")
    is_read: Int @doc(description: "is_read field")
    sender_id: Int @doc(description: "sender_id field")
    owner_id: Int @doc(description: "owner_id field")
    receiver_id: Int @doc(description: "receiver_id field")
    seller_send: Int @doc(description: "seller_send field")
    details (
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): SellerMessageDetails @doc(description: "List of message details by message_id.") @resolver(class: "\\Lof\\SellerMessageGraphQl\\Model\\Resolver\\MessageDetail")
}

type SellerMessageDetail {
    content: String @doc(description: "An encoded rating value id.")
    sender_name: String @doc(description: "sender_name field.")
    sender_email: String @doc(description: "sender_email field")
    receiver_name: String @doc(description: "receiver_name field.")
    is_read: Int @doc(description: "is_read field")
    created_at: String @doc(description: "created_at field")
}

input SellerMessageFilterInput {
    message_id: FilterEqualTypeInput @deprecated(reason: "Filter Seller Message message_id")
    description: FilterTypeInput @deprecated(reason: "Filter Seller Message description")
    subject: FilterTypeInput @deprecated(reason: "Filter Seller Message subject")
    sender_email: FilterTypeInput @deprecated(reason: "Filter Seller Message sender_email")
    sender_name: FilterTypeInput @deprecated(reason: "Filter Seller Message sender_name")
    created_at: FilterTypeInput @deprecated(reason: "Filter Seller Message created_at")
    status: FilterEqualTypeInput @deprecated(reason: "Filter Seller Message status")
    is_read: FilterEqualTypeInput @deprecated(reason: "Filter Seller Message is_read")
    sender_id: FilterEqualTypeInput @deprecated(reason: "Filter Seller Message sender_id")
    owner_id: FilterEqualTypeInput @deprecated(reason: "Filter Seller Message owner_id")
    receiver_id: FilterEqualTypeInput @deprecated(reason: "Filter Seller Message receiver_id")
    seller_send: FilterEqualTypeInput @deprecated(reason: "Filter Seller Message seller_send")
    or: SellerMessageFilterInput @deprecated(reason: "Filter Seller Message condition OR")
}

input SellerMessageSortInput {
    message_id: SortEnum @doc(description: "Sort by the message_id assigned to each message (default).")
    subject: SortEnum @doc(description: "Sort by the subject.")
    sender_id: SortEnum @doc(description: "Sort by the sender_id.")
    owner_id: SortEnum @doc(description: "Sort by the owner_id assigned to each order.")
    sender_name: SortEnum @doc(description: "Sort by the sender_name assigned to each message.")
    sender_email: SortEnum @doc(description: "Sort by the sender_email assigned to each message.")
    status: SortEnum @doc(description: "Sort by the status assigned to each message.")
    is_read: SortEnum @doc(description: "Sort by the is_read assigned to each message.")
    seller_send: SortEnum @doc(description: "Sort by the seller_send assigned to each message.")
}

input CustomerMessageInput {
    seller_url: String! @doc(description: "Current seller_url Key")
    subject: String @doc(description: "Message Subject")
    content: String! @doc(description: "Message Content.")
}

input ReplyMessageInput {
    message_id: Int! @doc(description: "Current message_id")
    content: String! @doc(description: "Message Content.")
}

input SellerReplyMessageInput {
    message_id: Int! @doc(description: "Current message_id")
    content: String! @doc(description: "Message Content.")
}

input AdminMessageInput {
    subject: String! @doc(description: "Message Subject")
    message : String! @doc(description: "Message Content.")
}

type MarketplaceOuput {
    code: String @doc(description: "The response code")
    message: String @doc(description: "The response message")
}
